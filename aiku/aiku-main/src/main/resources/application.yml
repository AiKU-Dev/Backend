spring:
  datasource:
    url: ${MYSQL_URL}
    username: ${MYSQL_USERNAME}
    password: ${MYSQL_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
  data:
    redis:
      host: localhost
      port: 6379
  jpa:
    hibernate:
      ddl-auto: none #주의 사용에 따라 create, update 사용 후 none으로 변경해주세요
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        default_batch_fetch_size: 100
        show_sql: true   # 하이버네이트 기본 SQL 출력 옵션
        format_sql: true # 하이버네이트 기본 SQL 포맷팅 옵션
  kafka:
    bootstrap-servers: ${KAFKA_SERVER_URL}
    consumer:
      auto-offset-reset: latest
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      enable-idempotence: true
      acks: all
      max-in-flight-requests-per-connection: 1
      retries: 3
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      linger-ms: 1
      batch-size: 16384
      buffer-memory: 1048576
  google:
    client-id: ${GOOGLE_CLIENT_ID}
    client-secret: ${GOOGLE_CLIENT_SECRET}
    refresh-token: ${GOOGLE_REFRESH_TOKEN}
    to-email: ${GMAIL_ACCOUNT}

mail:
  mime:
    charset: utf-8

jwt:
  secret: ${JWT_SECRET}

custom:
  password: ${CUSTOM_PASSWORD}

kakao:
  base_url: https://kauth.kakao.com
  app_id: ${KAKAO_APP_ID}

logging:
  level:
    root: INFO

cloud:
  aws:
    s3:
      bucket: ${AWS_BUCKET}
    stack.auto: false
    region.static: ap-northeast-2
    credentials:
      accessKey: ${AWS_ACCESS}
      secretKey: ${AWS_SECRET}